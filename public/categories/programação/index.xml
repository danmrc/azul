<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programação on AZUL</title>
    <link>https://azul.netlify.app/categories/programa%C3%A7%C3%A3o/</link>
    <description>Recent content in Programação on AZUL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>Copyright © 2008–2020, Pedro Cavalcante &amp; Daniel Coutinho; all rights reserved.</copyright>
    <lastBuildDate>Thu, 10 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://azul.netlify.app/categories/programa%C3%A7%C3%A3o/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>{tidyverse}, Simulações e Processamento de Séries Temporais</title>
      <link>https://azul.netlify.app/2020/12/10/impureza-e-contexto-storch/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://azul.netlify.app/2020/12/10/impureza-e-contexto-storch/</guid>
      <description>Só para deixar tudo bem claro quanto ao que eu quero dizer quando falo em uma função impura: se fornecida os mesmos argumentos devolverá o mesmo resultado. É simples construir alguns exemplos.
foo1 &amp;lt;- function(x) {lubridate::now() + lubridate::dseconds(x + sample(-10:10, size = 1))} foo1(1)## [1] &#34;2020-12-11 07:03:25 -03&#34;foo1(1)## [1] &#34;2020-12-11 07:03:22 -03&#34;foo1(1)## [1] &#34;2020-12-11 07:03:40 -03&#34;Funções impuras também podem assim ser porque desencadeiam efeitos colaterais, como por exemplo escrever algum arquivo na memória.</description>
    </item>
    
    <item>
      <title>Verossimilhança da Poisson</title>
      <link>https://azul.netlify.app/2020/10/10/verossimilhan%C3%A7a-da-poisson/</link>
      <pubDate>Sat, 10 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://azul.netlify.app/2020/10/10/verossimilhan%C3%A7a-da-poisson/</guid>
      <description>Dislaimer: eu tenho a formação em estatística de uma batata, não me leve muito a sério
A distribuição de Poisson descreve a probabilidade de que \(k\) eventos discretos ocorram em um espaço ou período de tempo em que \(\lambda\) eventos eram esperados. A densidade é:
\[f(k \, | \,\lambda) = \frac{\lambda^k e^{-\lambda}}{k!}\]
Existe um bom número de situações em que essa distribuição pode não ser adequada para modelar o que se propõe, mas vamos passar por cima disso.</description>
    </item>
    
    <item>
      <title>Crescimento Exponencial, mas sem o Corona</title>
      <link>https://azul.netlify.app/2020/07/29/crescimento-exponencial-mas-sem-o-corona/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://azul.netlify.app/2020/07/29/crescimento-exponencial-mas-sem-o-corona/</guid>
      <description>Uma família de funções que aparece em variados contextos é a exponencial:
\[f(x) = ab^x\]
Se diferenciarmos em particular a função \(b^x\) vamos ter \(b^x \log_e b\). Se \(b&amp;gt;1\) a função cresce, se for menor, decresce. A constante \(e\) é a única que equaliza a função e a derivada.
Não queria me alongar muito nem falar de corona então vou só fazer um gráfico bonito mostrando como a função muda a depender de qual \(b\) passamos como base.</description>
    </item>
    
    <item>
      <title>Classificando distribuições a partir dos momentos</title>
      <link>https://azul.netlify.app/2020/07/28/classificando-distribui%C3%A7%C3%B5es-a-partir-dos-momentos/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://azul.netlify.app/2020/07/28/classificando-distribui%C3%A7%C3%B5es-a-partir-dos-momentos/</guid>
      <description>Surgiu uma curiosidade legítima na minha cabeça ontem e eu queria saber se consigo, a partir dos momentos amostrais, treinar um classificador razoável para a família do processo gerador. Responder isso vai ser divertido porque é um bom playgrond para ferramentas do tidyverse e deixa de exemplo um fluxo mínimo de modelagem com tidymodels.
A primeira coisa a fazer é uma função que recebe um nome de função que possa gerar dados aleatórios seguindo algum processo conhecido - o parâmetro dgp vem de data generating process.</description>
    </item>
    
    <item>
      <title>R mais rápido</title>
      <link>https://azul.netlify.app/2020/07/02/r-mais-r%C3%A1pido/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://azul.netlify.app/2020/07/02/r-mais-r%C3%A1pido/</guid>
      <description>Os problemas de velocidade do R são muito conhecidos. Já foram feitos vários esforços para acelerar a linguagem no base-R, colocando Just In Time Compilation, por exemplo. Mesmo assim a linguagem ainda é relativamente lenta.
Existem várias iniciativas para acelerar o R. Uma das mais famosas é o R da Microsoft, o R Open. Eles usam bibliotecas que agilizam as contas e usa vários processadores sem precisar fazer nenhum setup.</description>
    </item>
    
    <item>
      <title>Cuide da saúde, pare de fazer loops</title>
      <link>https://azul.netlify.app/2020/06/06/cuide-da-sa%C3%BAde-pare-de-fazer-loops/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://azul.netlify.app/2020/06/06/cuide-da-sa%C3%BAde-pare-de-fazer-loops/</guid>
      <description>Disclaimer: eu tenho a formação em ciência da computação de uma batata, não me leve muito a sério
O querido Daniel Duque trouxe um problema para o meu colo e eu gostei tanto da simplicidade da solução em relação à abordagem mais óbvia de montar loops dentro de loops que decidi aproveitar para espalhar a palavra da programação funcional. Não por inteiro, apenas outra concepção de operações repetidas.</description>
    </item>
    
  </channel>
</rss>
