<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programação Funcional on AZUL</title>
    <link>/tags/programa%C3%A7%C3%A3o-funcional/</link>
    <description>Recent content in Programação Funcional on AZUL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <copyright>Copyright © 2008–2020, Pedro Cavalcante &amp; Daniel Coutinho; all rights reserved.</copyright>
    <lastBuildDate>Wed, 29 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/programa%C3%A7%C3%A3o-funcional/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Crescimento Exponencial, mas sem o Corona</title>
      <link>/2020/07/29/crescimento-exponencial-mas-sem-o-corona/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/07/29/crescimento-exponencial-mas-sem-o-corona/</guid>
      <description>Uma família de funções que aparece em variados contextos é a exponencial:
\[f(x) = ab^x\]
Se diferenciarmos em particular a função \(b^x\) vamos ter \(b^x \log_e b\). Se \(b&amp;gt;1\) a função cresce, se for menor, decresce. A constante \(e\) é a única que equaliza a função e a derivada.
Não queria me alongar muito nem falar de corona então vou só fazer um gráfico bonito mostrando como a função muda a depender de qual \(b\) passamos como base.</description>
    </item>
    
    <item>
      <title>Classificando distribuições a partir dos momentos</title>
      <link>/2020/07/28/classificando-distribui%C3%A7%C3%B5es-a-partir-dos-momentos/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/07/28/classificando-distribui%C3%A7%C3%B5es-a-partir-dos-momentos/</guid>
      <description>Surgiu uma curiosidade legítima na minha cabeça ontem e eu queria saber se consigo, a partir dos momentos amostrais, treinar um classificador razoável para a família do processo gerador. Responder isso vai ser divertido porque é um bom playgrond para ferramentas do tidyverse e deixa de exemplo um fluxo mínimo de modelagem com tidymodels.
A primeira coisa a fazer é uma função que recebe um nome de função que possa gerar dados aleatórios seguindo algum processo conhecido - o parâmetro dgp vem de data generating process.</description>
    </item>
    
    <item>
      <title>Cuide da saúde, pare de fazer loops</title>
      <link>/2020/06/06/cuide-da-sa%C3%BAde-pare-de-fazer-loops/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/06/06/cuide-da-sa%C3%BAde-pare-de-fazer-loops/</guid>
      <description>Disclaimer: eu tenho a formação em ciência da computação de uma batata, não me leve muito a sério
O querido Daniel Duque trouxe um problema para o meu colo e eu gostei tanto da simplicidade da solução em relação à abordagem mais óbvia de montar loops dentro de loops que decidi aproveitar para espalhar a palavra da programação funcional. Não por inteiro, apenas outra concepção de operações repetidas.
Antes do problema interessante do Daniel, um problema comum de simulações estatísticas como motivação.</description>
    </item>
    
    <item>
      <title>{purrr} para simular Sistemas Dinâmicos</title>
      <link>/2020/05/25/funprog-dyn-sys/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/2020/05/25/funprog-dyn-sys/</guid>
      <description>Compor funções é uma maneira muito intuitiva e sã de organizar código e eu quero mostrar isso na prática simulando um sistema dinâmico com \(n\) objetos sob o efeito de algum campo de vetores.
\(n = 1\) é por onde se começa Vamos pensar no que precisamos. Para simular um campo no plano precisamos um vetor com tipagem double e duas entradas caracteriza uma posição pontual. Queremos que o vetor entre, seja adicionado um termo que depende dos valores do vetor e um termo estocástico.</description>
    </item>
    
  </channel>
</rss>