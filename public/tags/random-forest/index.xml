<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Random Forest on AZUL</title>
    <link>/tags/random-forest/</link>
    <description>Recent content in Random Forest on AZUL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Mon, 20 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/random-forest/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fazendo previsões de séries com Random Forest</title>
      <link>/2019/05/20/forecasting-rf/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/20/forecasting-rf/</guid>
      <description>library(randomForest) ## randomForest 4.6-14 ## Type rfNews() to see new features/changes/bug fixes. library(BETS) ## ## Attaching package: &amp;#39;BETS&amp;#39; ## The following object is masked from &amp;#39;package:stats&amp;#39;: ## ## predict </description>
    </item>
    
    <item>
      <title>Classificando cursos no ProUni com Random Forest</title>
      <link>/2019/05/07/prouni-rf-classificacao/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/05/07/prouni-rf-classificacao/</guid>
      <description>Meu primeiro post aqui no blog foi um exercício de classificação. Como, com clustering \(k\)-means, poderíamos classificar cursos no ProUni? Aqui eu vou responder a mesma pergunta com uma ferramenta diferente, Random Forests. Vou explicar breve e simplesmente o que são/ como funcionam e depois estimar tudo.
Já aviso de antemão que a explicaçõe será muito superficial. É um assunto razoavelmente complicado então prefiro assim porque posso (i) evitar erros, (ii) não assustar alguns leitores e (iii) pular para a parte que mais me interessa que é a mão na massa.</description>
    </item>
    
  </channel>
</rss>